@model Law_Firm_EMS.ViewModels.Consultant.ConsultantEvaluationsViewModel
@{
    ViewBag.Title = "My Evaluations";
    Layout = "~/Views/Shared/ConsultantNavbar.cshtml";
   
    var cardClass = "bg-white p-6 rounded-lg shadow-md border border-gray-100 hover:shadow-lg transition-shadow duration-300 ease-in-out";
}

<div class="p-8 bg-gradient-to-br from-blue-50 to-indigo-50 font-sans text-gray-800 flex-grow overflow-y-auto">

    <h1 class="text-4xl font-extrabold text-gray-900 mb-4 tracking-tight">My Performance Evaluations</h1>
    <p class="text-lg text-gray-700 mb-8 max-w-2xl">View the performance evaluations submitted by HR.</p>

    
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 border-l-4 border-green-400 text-green-800 p-5 mb-8 rounded-lg shadow-md flex items-center animate-fade-in-down" role="alert">
            <i data-lucide="check-circle" class="w-6 h-6 mr-3 text-green-500"></i>
            <p class="font-semibold">@TempData["SuccessMessage"]</p>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 border-l-4 border-red-400 text-red-800 p-5 mb-8 rounded-lg shadow-md flex items-center animate-fade-in-down" role="alert">
            <i data-lucide="alert-triangle" class="w-6 h-6 mr-3 text-red-500"></i>
            <p class="font-semibold">@TempData["ErrorMessage"]</p>
        </div>
    }

    <div class="grid grid-cols-1 gap-6">
        @if (Model.Evaluations != null && Model.Evaluations.Any())
        {
            foreach (var evaluation in Model.Evaluations)
            {
                <div class="@cardClass evaluation-card" data-evaluation-id="@evaluation.EvalID">
                    <div class="flex justify-between items-center mb-2">
                        <h2 class="text-xl font-bold text-indigo-700">@evaluation.Title</h2>
                        <span class="text-sm text-gray-500">@evaluation.DateGiven.ToString("MMM dd, Jamboree")</span>
                    </div>
                    <p class="text-sm text-gray-600 mb-3">Evaluated by: <span class="font-semibold">@(evaluation.EvaluatedByHR != null ? evaluation.EvaluatedByHR.Name : "N/A")</span></p>

                   
                    <div class="evaluation-full-details hidden mt-4 pt-4 border-t border-gray-200">
                        <p class="text-sm text-gray-800 whitespace-pre-wrap">@evaluation.Details</p>
                    </div>

                    
                    <div class="expand-collapse-indicator mt-4 text-right text-indigo-600 cursor-pointer hover:text-indigo-800 transition-colors duration-200">
                        <span class="indicator-text">Click for Details</span>
                        <i data-lucide="chevron-down" class="inline-block w-5 h-5 ml-1 align-middle"></i>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="md:col-span-3 @cardClass text-center py-10">
                <p class="text-xl text-gray-600">No evaluations found for you yet.</p>
                <p class="text-md text-gray-500 mt-2">Check back later or contact HR for more information.</p>
            </div>
        }
    </div>
</div>

@section scripts {
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        lucide.createIcons();

        document.addEventListener('DOMContentLoaded', function () {
            const evaluationCards = document.querySelectorAll('.evaluation-card');

            evaluationCards.forEach(card => {
                const fullDetailsDiv = card.querySelector('.evaluation-full-details');
                const indicator = card.querySelector('.expand-collapse-indicator');
                const indicatorText = indicator.querySelector('.indicator-text');
                const indicatorIcon = indicator.querySelector('i[data-lucide]');

                
                fullDetailsDiv.classList.add('hidden');

                
                indicator.addEventListener('click', function (event) {
                    event.stopPropagation(); 

                    const isHidden = fullDetailsDiv.classList.contains('hidden');
                    if (isHidden) {
                        fullDetailsDiv.classList.remove('hidden');
                        indicatorText.textContent = 'Click to Collapse';
                        indicatorIcon.setAttribute('data-lucide', 'chevron-up');
                    } else {
                        fullDetailsDiv.classList.add('hidden');
                        indicatorText.textContent = 'Click for Details';
                        indicatorIcon.setAttribute('data-lucide', 'chevron-down');
                    }
                    lucide.createIcons(); 
                });
            });
        });
    </script>
    <style>
        
        @@keyframes fade-in-down {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .animate-fade-in-down {
            animation: fade-in-down 0.5s ease-out forwards;
        }

        
        .expand-collapse-indicator i {
            transition: transform 0.3s ease-in-out;
        }

        
       
        .line-clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
    </style>
}