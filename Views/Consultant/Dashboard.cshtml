@model Law_Firm_EMS.ViewModels.Consultant.ConsultantDashboardViewModel
@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/ConsultantNavbar.cshtml";
}

<div class="space-y-6">
    <!-- Top Section: Check-in and Stats -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div class="lg:col-span-1 bg-white p-6 rounded-lg shadow-md text-center">
            <h3 class="font-semibold text-lg text-gray-800 mb-4">Attendance</h3>
            <div class="relative w-40 h-40 mx-auto my-2 flex items-center justify-center">
                <svg class="absolute inset-0 w-full h-full" viewBox="0 0 100 100">
                    <circle cx="50" cy="50" r="45" stroke="#e5e7eb" stroke-width="5" fill="none" />
                    <circle id="progress-circle" cx="50" cy="50" r="45" stroke="#38bdf8" stroke-width="5" fill="none" transform="rotate(-90 50 50)" stroke-linecap="round" />
                </svg>
                <div id="timer-display" class="text-3xl font-bold text-gray-800 z-10">00:00:00</div>
            </div>
            <button id="checkInBtn" class="w-full max-w-xs mx-auto px-6 py-2 font-semibold text-white bg-green-500 rounded-lg hover:bg-green-600 transition-all">
                Check In
            </button>
        </div>

        <!-- Stats Cards -->
        <div class="lg:col-span-2 grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h4 class="font-semibold text-gray-600">Pending Tasks</h4>
                <p class="text-4xl font-bold text-sky-500 mt-2">@Model.PendingTasksCount</p>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h4 class="font-semibold text-gray-600">Assigned Clients</h4>
                <p class="text-4xl font-bold text-sky-500 mt-2">@Model.AssignedClientsCount</p>
            </div>
            <div class="sm:col-span-2 bg-white p-6 rounded-lg shadow-md">
                <h4 class="font-semibold text-gray-600 mb-3">Recent Assessments</h4>
                @if (Model.RecentEvaluations.Any())
                {
                    <ul class="space-y-2">
                        @foreach (var eval in Model.RecentEvaluations.Take(3))
                        {
                            <li class="text-sm text-gray-700 border-l-2 border-sky-500 pl-2">
                                @eval.Title <span class="text-gray-400">- @eval.DateGiven.ToString("MMM dd")</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-sm text-gray-500">No recent assessments.</p>
                }
            </div>
        </div>
    </div>

    <!-- Middle Section: Notice Board -->
    <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Notice Board</h3>
        <div class="space-y-3">
            <div class="bg-blue-50 p-3 rounded-md">
                <p class="font-semibold text-blue-800">System Maintenance Scheduled</p>
                <p class="text-sm text-blue-700">The portal will be down for scheduled maintenance on Saturday, June 28th from 2 AM to 4 AM.</p>
            </div>
            <div class="bg-yellow-50 p-3 rounded-md">
                <p class="font-semibold text-yellow-800">Reminder: Submit Weekly Reports</p>
                <p class="text-sm text-yellow-700">Please remember to submit your weekly progress reports by Friday at 5 PM.</p>
            </div>
        </div>
    </div>

    <!----- LEAVE SUMMARY & CHART SECTION ----->
    <div class="grid grid-cols-1 lg:grid-cols-5 gap-6">
        <!-- Leave Balances -->
        <div class="lg:col-span-2 bg-white p-6 rounded-lg shadow-md">
            <h3 class="text-xl font-bold text-gray-800 mb-4">Annual Leave Summary (@DateTime.Now.Year)</h3>
            <div class="space-y-4">
                <div>
                    <div class="flex justify-between mb-1">
                        <span class="text-base font-medium text-sky-700">Paid Leave</span>
                        <span class="text-sm font-medium text-sky-700">@Model.PaidLeaveRemaining / @Model.TotalPaidLeaveAllowance Days</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                        @{ var paidPercentage = (double)Model.PaidLeaveRemaining / Model.TotalPaidLeaveAllowance * 100; }
                        <div class="bg-sky-500 h-2.5 rounded-full" style="width: @(paidPercentage)%"></div>
                    </div>
                </div>
                <div>
                    <div class="flex justify-between mb-1">
                        <span class="text-base font-medium text-amber-700">Sick Leave</span>
                        <span class="text-sm font-medium text-amber-700">@Model.SickLeaveRemaining / @Model.TotalSickLeaveAllowance Days</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                        @{ var sickPercentage = (double)Model.SickLeaveRemaining / Model.TotalSickLeaveAllowance * 100; }
                        <div class="bg-amber-500 h-2.5 rounded-full" style="width: @(sickPercentage)%"></div>
                    </div>
                </div>
                <div>
                    <div class="flex justify-between mb-1">
                        <span class="text-base font-medium text-slate-700">Unpaid Leave</span>
                        <span class="text-sm font-medium text-slate-700">@Model.UnpaidLeaveRemaining / @Model.TotalUnpaidLeaveAllowance Days</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                        @{ var unpaidPercentage = (double)Model.UnpaidLeaveRemaining / Model.TotalUnpaidLeaveAllowance * 100; }
                        <div class="bg-slate-500 h-2.5 rounded-full" style="width: @(unpaidPercentage)%"></div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Leave History Chart -->
        <div class="lg:col-span-3 bg-white p-6 rounded-lg shadow-md">
            <h3 class="text-xl font-bold text-gray-800 mb-4">Leave History (Last 6 Months)</h3>
            <div class="h-64">
                <canvas id="leaveChart"></canvas>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // --- Check-in Logic ---
        const checkInBtn = document.getElementById('checkInBtn');
        const timerDisplay = document.getElementById('timer-display');
        const progressCircle = document.getElementById('progress-circle');
        let isCheckedIn = false;
        let timerInterval;
        let startTime;
        const circleLength = progressCircle.getTotalLength();
        gsap.set(progressCircle, { strokeDasharray: circleLength, strokeDashoffset: circleLength });

        checkInBtn.addEventListener('click', function() {
            isCheckedIn = !isCheckedIn;
            if (isCheckedIn) {
                this.textContent = 'Check Out';
                this.classList.remove('bg-green-500', 'hover:bg-green-600');
                this.classList.add('bg-red-500', 'hover:bg-red-600');
                startTime = new Date();
                gsap.to(progressCircle, { strokeDashoffset: 0, duration: 1 });
                timerInterval = setInterval(updateTimer, 1000);
            } else {
                this.textContent = 'Check In';
                this.classList.remove('bg-red-500', 'hover:bg-red-600');
                this.classList.add('bg-green-500', 'hover:bg-green-600');
                clearInterval(timerInterval);
                gsap.to(progressCircle, { strokeDashoffset: circleLength, duration: 1 });
            }
        });

        function updateTimer() {
            const now = new Date();
            const elapsed = new Date(now - startTime);
            const hours = String(elapsed.getUTCHours()).padStart(2, '0');
            const minutes = String(elapsed.getUTCMinutes()).padStart(2, '0');
            const seconds = String(elapsed.getUTCSeconds()).padStart(2, '0');
            timerDisplay.textContent = `${hours}:${minutes}:${seconds}`;
        }

        // --- Chart Logic ---
        const ctx = document.getElementById('leaveChart').getContext('2d');
        const leaveChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [@Html.Raw(Model.LeaveChartLabels)],
                datasets: [{
                    label: 'Days Taken',
                    data: [@Html.Raw(Model.LeaveChartData)],
                    backgroundColor: 'rgba(56, 189, 248, 0.6)',
                    borderColor: 'rgba(14, 165, 233, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                           stepSize: 1
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    });
    </script>
}

