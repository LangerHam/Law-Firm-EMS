@model Law_Firm_EMS.ViewModels.ClientDashboardViewModel

@{
    ViewBag.Title = "Client Dashboard";
    Layout = "~/Views/Shared/ClientNavbar.cshtml";

    var cardClass = "bg-white p-6 rounded-xl shadow-md border border-gray-200";
}

<div class="bg-white shadow-sm flex justify-between items-center px-6 py-4">
    <div class="text-base text-gray-700">
        Consultant Name: <strong>@Model.ConsultantName</strong>
    </div>
    <div class="flex items-center">
        <i data-lucide="scale" class="h-6 w-6 text-sky-400"></i>
        <span class="ml-2 text-lg font-semibold">NIW Solutions</span>
    </div>
</div>

<main class="p-6 overflow-y-auto flex-1 bg-gray-50">

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">

        <div class="@cardClass h-fit">
            <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                <i data-lucide="clipboard" class="w-5 h-5 mr-2 text-sky-500"></i>
                Quick Access to Forms
            </h2>
            <ul class="list-none space-y-2 text-sky-600 text-sm">
                <li><a href="@Url.Action("Forms", "Client")" class="hover:underline block py-1 px-2 rounded-md hover:bg-sky-50">G-28 (Attorney Representation)</a></li>
                <li><a href="@Url.Action("Forms", "Client")" class="hover:underline block py-1 px-2 rounded-md hover:bg-sky-50">G-1145 (Notification)</a></li>
                <li><a href="@Url.Action("Forms", "Client")" class="hover:underline block py-1 px-2 rounded-md hover:bg-sky-50">I-140 (Registration)</a></li>
                <li><a href="@Url.Action("Forms", "Client")" class="hover:underline block py-1 px-2 rounded-md hover:bg-sky-50">I-907 (Premium Registration - optional)</a></li>
                <li><a href="@Url.Action("Forms", "Client")" class="hover:underline block py-1 px-2 rounded-md hover:bg-sky-50">ETA 750 Part B (Employment/Academic History)</a></li>
            </ul>
        </div>

        <div class="@cardClass h-fit lg:col-span-1">
            <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                <i data-lucide="scroll" class="w-5 h-5 mr-2 text-orange-500"></i>
                LOR Review Process
            </h2>
            <p class="mb-3 text-sm"><a href="@Url.Action("Documents", "Client")" class="text-sky-600 underline hover:text-sky-700">Submit/View LORs</a></p>

            @if (Model.LORs != null && Model.LORs.Any())
            {
                <ol class="mt-2 text-sm list-decimal pl-5 space-y-2">
                    @foreach (var lor in Model.LORs)
                    {
                        <li>
                            <div class="flex justify-between items-center py-1">
                                <a href="@Url.Action("DownloadDocument", new { id = lor.DocumentID })" target="_blank" class="text-sky-600 hover:underline flex-grow mr-2 truncate">
                                    @System.IO.Path.GetFileName(lor.UploadPath)
                                </a>
                                <span class="font-medium text-xs px-2 py-1 rounded-full border
                                        @(lor.StatusName == "Pending" ? "bg-red-100 text-red-700 border-red-300" :
                                          lor.StatusName == "Approved" ? "bg-green-300 text-green-700 border-green-300" :
                                          lor.StatusName == "Rejected" ? "bg-red-900 text-white border-red-800" :
                                          lor.StatusName == "Reviewing" ? "bg-teal-100 text-orange-700 border-orange-300" :
                                          lor.StatusName == "Submitted" ? "bg-lime-200 text-blue-700 border-blue-300" :
                                          lor.StatusName == "Completed" ? "bg-orange-300 text-green-700 border-green-300" :
                                          lor.StatusName == "In Progress" ? "bg-gray-300 text-yellow-800 border-yellow-300" :
                                          "bg-gray-500 text-gray-700 border-gray-300")">
                                    @lor.StatusName
                                </span>
                            </div>
                        </li>
                    }
                </ol>
            }
            else
            {
                <p class="mt-4 text-sm text-gray-700">No LOR document was uploaded.</p>
            }
        </div>

        <div class="flex flex-col gap-6">
            <div class="@cardClass">
                <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <i data-lucide="bar-chart-2" class="w-5 h-5 mr-2 text-purple-500"></i>
                    EIA Status
                </h2>
                @{
                    var eiaStatusDisplay = Model.EIAStatus;
                    string eiaStatusClass;
                    switch (eiaStatusDisplay)
                    {
                        case "Pending": eiaStatusClass = "bg-red-100 text-red-700 border-red-300"; break;
                        case "Approved": eiaStatusClass = "bg-green-300 text-green-700 border-green-300"; break;
                        case "Rejected": eiaStatusClass = "bg-red-900 text-white border-red-800"; break;
                        case "Reviewing": eiaStatusClass = "bg-teal-100 text-orange-700 border-orange-300"; break;
                        case "Submitted": eiaStatusClass = "bg-lime-200 text-blue-700 border-blue-300"; break;
                        case "Completed": eiaStatusClass = "bg-orange-300 text-green-700 border-green-300"; break;
                        case "In Progress": eiaStatusClass = "bg-gray-300 text-yellow-800 border-yellow-300"; break;
                        default: eiaStatusClass = "bg-gray-500 text-gray-700 border-gray-300"; break;
                    }
                }
                <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full border @eiaStatusClass">
                    @eiaStatusDisplay
                </span>
            </div>

            <div class="@cardClass">
                <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <i data-lucide="bar-chart-2" class="w-5 h-5 mr-2 text-purple-500"></i>
                    PESP Status
                </h2>
                @{
                    var pespStatusDisplay = Model.PESPStatus;
                    string pespStatusClass;
                    switch (pespStatusDisplay)
                    {
                        case "Pending": pespStatusClass = "bg-red-100 text-red-700 border-red-300"; break;
                        case "Approved": pespStatusClass = "bg-green-300 text-green-700 border-green-300"; break;
                        case "Rejected": pespStatusClass = "bg-red-900 text-white border-red-800"; break;
                        case "Reviewing": pespStatusClass = "bg-teal-700 text-orange-700 border-orange-300"; break;
                        case "Submitted": pespStatusClass = "bg-lime-200 text-blue-700 border-blue-300"; break;
                        case "Completed": pespStatusClass = "bg-orange-300 text-green-700 border-green-300"; break;
                        case "In Progress": pespStatusClass = "bg-gray-300 text-yellow-800 border-yellow-300"; break;
                        default: pespStatusClass = "bg-gray-500 text-gray-700 border-gray-300"; break;
                    }
                }
                <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full border @pespStatusClass">
                    @pespStatusDisplay
                </span>
            </div>
        </div>
    </div>

    <div class="@cardClass mb-6">
        <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
            <i data-lucide="donut" class="w-5 h-5 mr-2 text-teal-500"></i>
            Overall Document Status Breakdown
        </h2>
        @if (Model.StatusSummary == null || !Model.StatusSummary.Any())
        {
            <div class="flex flex-col items-center justify-center py-10 text-gray-500">
                <i data-lucide="info" class="w-12 h-12 mb-4 text-gray-400"></i>
                <p class="text-lg font-medium">No document status data available yet.</p>
                <p class="text-sm mt-2">Upload documents to see their status breakdown here.</p>
            </div>
        }
        else
        {
            <div style="width: 100%; max-width: 800px; margin: auto; height: 400px;">
                <canvas id="statusChart" class="mt-4"></canvas>
            </div>
        }
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div class="@cardClass text-center">
            <h3 class="text-base text-gray-600 mb-2 flex items-center justify-center">
                <i data-lucide="wallet" class="w-5 h-5 mr-2 text-green-500"></i>
                Paid Invoices
            </h3>
            <p class="text-3xl font-bold text-sky-600">@Model.Paid.ToString("C", new System.Globalization.CultureInfo("bn-BD"))</p>
        </div>
        <div class="@cardClass text-center">
            <h3 class="text-base text-gray-600 mb-2 flex items-center justify-center">
                <i data-lucide="credit-card" class="w-5 h-5 mr-2 text-red-500"></i>
                Dues
            </h3>
            <p class="text-3xl font-bold text-red-500">@Model.Due.ToString("C", new System.Globalization.CultureInfo("bn-BD"))</p>
        </div>
        <div class="@cardClass text-center">
            <h3 class="text-base text-gray-600 mb-2 flex items-center justify-center">
                <i data-lucide="receipt-text" class="w-5 h-5 mr-2 text-gray-600"></i>
                Total Fees
            </h3>
            <p class="text-3xl font-bold text-gray-800">@Model.TotalFees.ToString("C", new System.Globalization.CultureInfo("bn-BD"))</p>
        </div>
    </div>
</main>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lucide@latest"></script>
    <script>
        lucide.createIcons();

        document.addEventListener('DOMContentLoaded', function () {
            const statusData = @Html.Raw(Json.Encode(Model.StatusSummary));

            if (statusData && statusData.length > 0) {
                const ctx = document.getElementById('statusChart').getContext('2d');

                const labels = statusData.map(s => s.Status);
                const dataCounts = statusData.map(s => s.Count);

                
                const statusColorsMap = {
                    "Pending": '#FECACA', 
                    "Approved": '#99cca7', 
                    "Rejected": '#421719', 
                    "Reviewing": '#5e807e', 
                    "Submitted": '#bdd47f', 
                    "Completed": '#e3b071', 
                    "In Progress": '#c6c2cf', 
                    "Default": '#808080' 
                };

                
                const backgroundColors = statusData.map(s => statusColorsMap[s.Status] || statusColorsMap["Default"]);


                const chart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Number of Documents',
                            data: dataCounts,
                            backgroundColor: backgroundColors,
                            borderColor: '#ffffff',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            animateScale: true,
                            animateRotate: true
                        },
                        cutout: '70%',
                        plugins: {
                            title: {
                                display: true,
                                text: 'Overall Document Status Breakdown',
                                font: {
                                    size: 16
                                }
                            },
                            legend: {
                                display: true,
                                position: 'right',
                                labels: {
                                    usePointStyle: true,
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        const total = context.dataset.data.reduce((acc, current) => acc + current, 0);
                                        const value = context.parsed;
                                        const percentage = ((value / total) * 100).toFixed(1) + '%';
                                        label += value + ' (' + percentage + ')';
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            } else {
                console.log("No status data available for the chart. The placeholder message is displayed.");
            }
        });
    </script>
}