@model Law_Firm_EMS.ViewModels.ClientFormsViewModel

@{
    ViewBag.Title = "Client Forms"; 
    Layout = "~/Views/Shared/ClientNavbar.cshtml"; 

    
    var cardClass = "bg-white p-8 rounded-2xl shadow-xl border border-gray-50 transform hover:scale-[1.01] transition-all duration-300 ease-in-out";
}

<div class="p-8 bg-gradient-to-br from-blue-50 to-indigo-50 min-h-screen font-sans text-gray-800">
    <h1 class="text-5xl font-extrabold text-gray-900 mb-4 tracking-tight leading-tight">Your Essential Forms</h1>
    <p class="text-xl text-gray-700 mb-10 max-w-2xl">Effortlessly manage your legal documentation. Download templates and upload completed forms with ease.</p>

   
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 border-l-4 border-green-400 text-green-800 p-5 mb-8 rounded-lg shadow-md flex items-center animate-fade-in-down" role="alert">
            <i data-lucide="check-circle" class="w-6 h-6 mr-3 text-green-500"></i>
            <p class="font-semibold">@TempData["SuccessMessage"]</p>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 border-l-4 border-red-400 text-red-800 p-5 mb-8 rounded-lg shadow-md flex items-center animate-fade-in-down" role="alert">
            <i data-lucide="alert-triangle" class="w-6 h-6 mr-3 text-red-500"></i>
            <p class="font-semibold">@TempData["ErrorMessage"]</p>
        </div>
    }

    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div class="md:col-span-1">
            <div class="@cardClass h-full flex flex-col items-stretch">
                <h2 class="text-3xl font-bold text-gray-800 border-b-2 border-indigo-100 pb-5 mb-6 flex items-center">
                    <i data-lucide="folder-open" class="w-8 h-8 mr-4 text-indigo-500"></i>
                    Required Documents
                </h2>
                <div class="space-y-3 overflow-y-auto flex-grow pr-2 custom-scrollbar">
                    @foreach (var formItem in Model.AvailableForms)
                    {
                        <button onclick="showFormDetails(@formItem.FormTypeID, this)"
                                class="form-select-btn w-full text-left py-4 px-5 rounded-xl
                                       hover:bg-indigo-50 hover:text-indigo-800 transition-all duration-200 ease-in-out
                                       flex justify-between items-center group
                                       text-gray-700 font-medium text-lg border border-transparent hover:border-indigo-200 focus:outline-none focus:ring-2 focus:ring-indigo-300">
                            <div>
                                <span>@formItem.FormTypeName</span>
                                @if (formItem.IsOptional)
                                {
                                    <span class="ml-2 text-sm text-gray-500 font-normal opacity-80 italic">(Optional)</span>
                                }
                            </div>
                            @if (formItem.Status == "Submitted")
                            {
                                <i data-lucide="check-circle-2" class="h-7 w-7 text-green-500 flex-shrink-0 group-hover:text-green-600"></i>
                            }
                            else
                            {
                                <i data-lucide="circle-dashed" class="h-7 w-7 text-gray-400 flex-shrink-0 group-hover:text-gray-500"></i>
                            }
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="md:col-span-2">
            @foreach (var formItem in Model.AvailableForms)
            {
                <div id="form-details-@formItem.FormTypeID" class="form-details-panel @cardClass hidden">
                    <h3 class="text-4xl font-extrabold text-gray-900 mb-4">@formItem.FormTypeName</h3>
                    <p class="text-lg text-gray-700 mb-10 leading-relaxed">@formItem.FormTypeDescription</p>

                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8">
                        @if (!string.IsNullOrEmpty(formItem.TemplatePath))
                        {
                            <a href="@Url.Action("DownloadTemplate", "Client", new { formTypeId = formItem.FormTypeID })"
                               class="bg-blue-600 text-white p-6 rounded-xl flex flex-col items-center justify-center text-center
                                      hover:bg-blue-700 transition-all duration-300 ease-in-out shadow-lg hover:shadow-xl
                                      transform hover:-translate-y-1 focus:outline-none focus:ring-4 focus:ring-blue-300">
                                <i data-lucide="download-cloud" class="h-12 w-12 mb-3"></i>
                                <span class="font-bold text-xl">Download Template</span>
                                <span class="text-sm opacity-90 mt-1">Get the blank form here</span>
                            </a>
                        }

                        @using (Html.BeginForm("UploadForm", "Client", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("formTypeId", formItem.FormTypeID)
                            <div class="bg-gray-100 border-2 border-dashed border-gray-300 p-6 rounded-xl flex flex-col items-center justify-center text-center
                                        cursor-pointer hover:border-blue-400 hover:bg-gray-50 transition-all duration-300 ease-in-out shadow-inner
                                        focus-within:border-blue-500 focus-within:ring-4 focus-within:ring-blue-200">
                                <i data-lucide="upload-cloud" class="h-12 w-12 mb-3 text-gray-600"></i>
                                <label for="file-upload-@formItem.FormTypeID" class="font-semibold text-blue-700 cursor-pointer hover:underline text-xl">
                                    Upload Completed Form
                                </label>
                                <input id="file-upload-@formItem.FormTypeID" name="file" type="file" class="sr-only" onchange="this.form.submit()">
                                <p class="text-sm text-gray-500 mt-2">Accepted: PDF, DOCX, JPG, PNG. Max: 10MB</p>
                            </div>
                        }
                    </div>

                    <div class="mt-8 pt-6 border-t border-gray-200">
                        <h4 class="font-bold text-2xl text-gray-800 mb-4 flex items-center">
                            <i data-lucide="info" class="w-7 h-7 mr-3 text-purple-500"></i>
                            Submission Status
                        </h4>
                        @if (formItem.Status == "Submitted")
                        {
                            <div class="flex items-center text-green-600 text-lg">
                                <i data-lucide="check-circle" class="h-7 w-7 mr-3"></i>
                                <span>Submitted <span class="font-bold">@(formItem.SubmittedDate.HasValue ? "on " + formItem.SubmittedDate.Value.ToString("MMMM dd, yyyy") : "")</span></span>
                                <a href="@Url.Action("DownloadUploadedForm", "Client", new { formTypeId = formItem.FormTypeID })"
                                   class="ml-8 text-blue-600 text-lg hover:underline flex items-center transition-colors duration-200 font-medium">
                                    <i data-lucide="file-text" class="w-6 h-6 mr-2"></i> Download Uploaded File
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center text-gray-500 text-lg">
                                <i data-lucide="clock" class="h-7 w-7 mr-3"></i>
                                <span>Not yet submitted.</span>
                            </div>
                        }
                    </div>
                </div>
            }
            <div id="form-placeholder" class="@cardClass text-center p-16 flex flex-col items-center justify-center min-h-[400px]">
                <i data-lucide="arrow-left" class="h-20 w-20 mx-auto mb-8 text-gray-300 opacity-80"></i>
                <p class="text-2xl text-gray-600 font-semibold leading-relaxed max-w-md">Select a form from the left to view its details and submission options.</p>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        
        lucide.createIcons();

        document.addEventListener('DOMContentLoaded', function () {
            const urlParams = new URLSearchParams(window.location.search);
            const preSelectedFormId = urlParams.get('selectedForm');
            const formSelectButtons = document.querySelectorAll('.form-select-btn');

            if (preSelectedFormId) {
                const button = document.querySelector(`.form-select-btn[onclick*="showFormDetails(${preSelectedFormId})"]`);
                if (button) {
                    showFormDetails(parseInt(preSelectedFormId), button);
                } else if (formSelectButtons.length > 0) {
                   
                    const firstFormButton = formSelectButtons[0];
                    const match = firstFormButton.onclick.toString().match(/\((\d+)/);
                    if (match && match[1]) {
                        showFormDetails(parseInt(match[1]), firstFormButton);
                    }
                } else {
                    
                    document.getElementById('form-placeholder').classList.remove('hidden');
                }
            } else if (formSelectButtons.length > 0) {
                
                const firstFormButton = formSelectButtons[0];
                const match = firstFormButton.onclick.toString().match(/\((\d+)/);
                if (match && match[1]) {
                    showFormDetails(parseInt(match[1]), firstFormButton);
                }
            } else {
                
                document.getElementById('form-placeholder').classList.remove('hidden');
            }
        });

        function showFormDetails(formTypeId, clickedButton) {
           
            document.querySelectorAll('.form-details-panel').forEach(panel => {
                panel.classList.add('hidden');
            });
            document.getElementById('form-placeholder').classList.add('hidden');

            
            const selectedPanel = document.getElementById('form-details-' + formTypeId);
            if (selectedPanel) {
                selectedPanel.classList.remove('hidden');
            }

            
            document.querySelectorAll('.form-select-btn').forEach(btn => {
                btn.classList.remove('bg-indigo-100', 'text-indigo-800', 'font-bold'); 
            });

            
            if (clickedButton) {
                clickedButton.classList.add('bg-indigo-100', 'text-indigo-800', 'font-bold'); 
            }
        }
    </script>
    <style>
        
        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f0f4f8; 
            border-radius: 10px;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #a7b7cd; 
            border-radius: 10px;
        }

            .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                background: #8096b7; 
            }

       
        @@keyframes fade-in-down {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .animate-fade-in-down {
            animation: fade-in-down 0.5s ease-out forwards;
        }
    </style>
}