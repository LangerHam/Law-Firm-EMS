@model Law_Firm_EMS.ViewModels.ClientSettingsViewModel
@using System.Web.Mvc.Html
@{
    ViewBag.Title = "Client Settings";
    Layout = "~/Views/Shared/ClientNavbar.cshtml";

    var cardClass = "bg-white p-8 rounded-2xl shadow-xl border border-gray-50 transform hover:scale-[1.01] transition-all duration-300 ease-in-out";
}


<div class="p-8 bg-gradient-to-br from-blue-50 to-indigo-50 font-sans text-gray-800 flex-grow overflow-y-auto">

    <h1 class="text-5xl font-extrabold text-gray-900 mb-4 tracking-tight leading-tight">Account Settings</h1>
    <p class="text-xl text-gray-700 mb-10 max-w-2xl">Manage your profile information and change your password.</p>


    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 border-l-4 border-green-400 text-green-800 p-5 mb-8 rounded-lg shadow-md flex items-center animate-fade-in-down" role="alert">
            <i data-lucide="check-circle" class="w-6 h-6 mr-3 text-green-500"></i>
            <p class="font-semibold">@TempData["SuccessMessage"]</p>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 border-l-4 border-red-400 text-red-800 p-5 mb-8 rounded-lg shadow-md flex items-center animate-fade-in-down" role="alert">
            <i data-lucide="alert-triangle" class="w-6 h-6 mr-3 text-red-500"></i>
            <p class="font-semibold">@TempData["ErrorMessage"]</p>
        </div>
    }


    <div class="@cardClass">
        @using (Html.BeginForm("Settings", "Client", FormMethod.Post, new { @class = "space-y-6", id = "settingsForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.UserID)

            <div class="flex justify-between items-center mb-6 border-b pb-4">
                <div>
                    <h2 class="text-3xl font-bold text-gray-800">Update Your Details</h2>
                </div>
                <button type="submit" class="bg-indigo-600 text-white px-5 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center shadow-md">
                    <i data-lucide="save" class="h-4 w-4 mr-2"></i>
                    <span>Save Changes</span>
                </button>
            </div>

            
            <div id="validationSummaryBox" class="text-red-600 bg-red-50 p-3 rounded-md mb-6 border border-red-200">
                @Html.ValidationSummary(false, "", new {  })
            </div>

            <div class="space-y-8">

                <div class="border p-6 rounded-lg bg-gray-50">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                        <i data-lucide="user" class="h-5 w-5 mr-2 text-blue-600"></i> Personal Information
                    </h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

                        <div>
                            @Html.LabelFor(model => model.Name, "Full Name", new { @class = "block text-sm font-medium text-gray-700" })
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-base" } })
                            <span id="name-error" class="text-red-600 text-xs mt-1"></span>
                        </div>
                        <div>
                            @Html.LabelFor(model => model.Email, new { @class = "block text-sm font-medium text-gray-700" })
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-base" } })
                            <span id="email-error" class="text-red-600 text-xs mt-1"></span>
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-red-600 text-xs mt-1" }) 
                        </div>
                        <div class="md:col-span-2">

                            @Html.LabelFor(model => model.Phone, "Phone Number", new { @class = "block text-sm font-medium text-gray-700" })
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-base" } })
                            <span id="phone-error" class="text-red-600 text-xs mt-1"></span>
                        </div>
                    </div>
                </div>


                <div class="border p-6 rounded-lg bg-gray-50">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                        <i data-lucide="lock" class="h-5 w-5 mr-2 text-purple-600"></i> Change Password
                    </h3>
                    <p class="text-sm text-gray-600 mb-4">Leave password fields blank if you don't want to change it.</p>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

                        <div>
                            @Html.LabelFor(model => model.CurrentPassword, new { @class = "block text-sm font-medium text-gray-700" })
                            @Html.PasswordFor(model => model.CurrentPassword, new { @class = "mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 text-base", id = "currentPassword" })
                            <span id="currentPassword-error" class="text-red-600 text-xs mt-1"></span>
                            @Html.ValidationMessageFor(model => model.CurrentPassword, "", new { @class = "text-red-600 text-xs mt-1" }) @* Keep this for server-side incorrect password check *@
                        </div>
                        <div class="md:col-span-2">
                            @Html.LabelFor(model => model.NewPassword, new { @class = "block text-sm font-medium text-gray-700" })
                            @Html.PasswordFor(model => model.NewPassword, new { @class = "mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 text-base", id = "newPassword" })
                            <span id="newPassword-error" class="text-red-600 text-xs mt-1"></span>
                        </div>
                        <div class="md:col-span-2">
                            @Html.LabelFor(model => model.ConfirmNewPassword, new { @class = "block text-sm font-medium text-gray-700" })
                            @Html.PasswordFor(model => model.ConfirmNewPassword, new { @class = "mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 text-base", id = "confirmNewPassword" })
                            <span id="confirmNewPassword-error" class="text-red-600 text-xs mt-1"></span>
                            @Html.ValidationMessageFor(model => model.ConfirmNewPassword, "", new { @class = "text-red-600 text-xs mt-1" }) @* Keep this for server-side mismatch check *@
                        </div>
                    </div>
                </div>
            </div>


        }
    </div>
</div>

@section scripts {
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        lucide.createIcons();

       

        document.addEventListener('DOMContentLoaded', function () {
            const validationSummaryBox = document.getElementById('validationSummaryBox');
            
            const validationSummaryUL = validationSummaryBox.querySelector('ul.validation-summary-errors');

            
            const hasServerErrors = validationSummaryUL && validationSummaryUL.querySelectorAll('li').length > 0;

            if (hasServerErrors) {
                validationSummaryBox.style.display = 'block'; 
            } else {
                validationSummaryBox.style.display = 'none';
            }

        
        });


        document.getElementById('settingsForm').addEventListener('submit', function (event) {
            let isValid = true;
           
            const validationSummaryBox = document.getElementById('validationSummaryBox');

            
            document.querySelectorAll('.text-red-600.text-xs').forEach(el => el.textContent = '');

            
            validationSummaryBox.style.display = 'none';

            
            const nameInput = document.getElementById('@Html.IdFor(m => m.Name)');
            const emailInput = document.getElementById('@Html.IdFor(m => m.Email)');
            const phoneInput = document.getElementById('@Html.IdFor(m => m.Phone)');

            if (nameInput.value.trim() === '') {
                document.getElementById('name-error').textContent = 'Full Name is required.';
                isValid = false;
            }

            
            const emailErrorSpan = document.getElementById('email-error');
            const emailValue = emailInput.value.trim();

            if (emailValue === '') {
                emailErrorSpan.textContent = 'Email is required.';
                isValid = false;
            } else if (!emailValue.endsWith('gmail.com')) { 
                emailErrorSpan.textContent = 'Email must end with gmail.com';
                isValid = false;
            }
           


            
            if (phoneInput.value.trim() === '') {
                document.getElementById('phone-error').textContent = 'Phone Number is required.';
                isValid = false;
            }


            
            const currentPasswordInput = document.getElementById('currentPassword');
            const newPasswordInput = document.getElementById('newPassword');
            const confirmNewPasswordInput = document.getElementById('confirmNewPassword');

            const currentPassword = currentPasswordInput.value;
            const newPassword = newPasswordInput.value;
            const confirmNewPassword = confirmNewPasswordInput.value;

            
            const passwordFieldsAttempted = currentPassword !== '' || newPassword !== '' || confirmNewPassword !== '';

            if (passwordFieldsAttempted) {
                if (currentPassword === '') {
                    document.getElementById('currentPassword-error').textContent = 'Current Password is required to change password.';
                    isValid = false;
                }
                if (newPassword === '') {
                    document.getElementById('newPassword-error').textContent = 'New Password is required.';
                    isValid = false;
                } else if (newPassword.length < 6) {
                    document.getElementById('newPassword-error').textContent = 'The new password must be at least 6 characters long.';
                    isValid = false;
                }

                if (confirmNewPassword === '') {
                    document.getElementById('confirmNewPassword-error').textContent = 'Confirm New Password is required.';
                    isValid = false;
                } else if (newPassword !== confirmNewPassword) {
                    document.getElementById('confirmNewPassword-error').textContent = 'The new password and confirmation password do not match.';
                    isValid = false;
                }
            }

            if (!isValid) {
                event.preventDefault(); 
               
            }
        });
    </script>
    <style>
       
        @@keyframes fade-in-down {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .animate-fade-in-down {
            animation: fade-in-down 0.5s ease-out forwards;
        }
    </style>
}