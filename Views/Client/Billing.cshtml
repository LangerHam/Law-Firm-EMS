@model Law_Firm_EMS.ViewModels.ClientBillingViewModel

@{
    ViewBag.Title = "My Billing";
    Layout = "~/Views/Shared/ClientNavbar.cshtml";

    var cardClass = "bg-white p-6 rounded-xl shadow-md border border-gray-200";
}

<main class="p-6 overflow-y-auto flex-1 bg-gray-50">

    <h1 class="text-2xl font-bold text-gray-800 mb-4">Billing & Payments</h1>
    <p class="text-md text-gray-700 mb-8 max-w-2xl">Manage your service fees, view payment history, and make payments securely.</p>

    <div id="alertContainer" class="mb-6">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="bg-green-50 border-l-4 border-green-400 text-green-800 p-5 rounded-lg shadow-md flex items-center animate-fade-in-down" role="alert">
                <i data-lucide="check-circle" class="w-6 h-6 mr-3 text-green-500"></i>
                <p class="font-semibold">@TempData["SuccessMessage"]</p>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="bg-red-50 border-l-4 border-red-400 text-red-800 p-5 rounded-lg shadow-md flex items-center animate-fade-in-down" role="alert">
                <i data-lucide="alert-triangle" class="w-6 h-6 mr-3 text-red-500"></i>
                <p class="font-semibold">@TempData["ErrorMessage"]</p>
            </div>
        }
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <div class="@cardClass flex flex-col justify-between">
            <div>
                <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <i data-lucide="wallet" class="w-5 h-5 mr-2 text-green-600"></i>
                    Billing Overview
                </h2>
                <div class="space-y-4">
                    <div class="flex justify-between items-center py-2 border-b border-gray-100">
                        <span class="text-base text-gray-600 font-medium">Service Fees:</span>
                        <span class="text-xl font-bold text-gray-900" id="totalFeesDisplay">@Model.BillingSummary.TotalFees.ToString("C", new System.Globalization.CultureInfo("en-BD"))</span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b border-gray-100">
                        <span class="text-base text-gray-600 font-medium">Paid:</span>
                        <span class="text-xl font-bold text-green-600" id="paidAmountDisplay">@Model.BillingSummary.PaidAmount.ToString("C", new System.Globalization.CultureInfo("en-BD"))</span>
                    </div>
                    <div class="flex justify-between items-center py-2">
                        <span class="text-lg text-gray-700 font-bold">Amount Due:</span>
                        <span class="text-2xl font-extrabold text-red-600" id="dueAmountDisplay">@Model.BillingSummary.DueAmount.ToString("C", new System.Globalization.CultureInfo("en-BD"))</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="@cardClass lg:col-span-2 flex flex-col">
            <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                <i data-lucide="credit-card" class="w-5 h-5 mr-2 text-blue-600"></i>
                Make a Payment
            </h2>
            <p class="text-gray-600 mb-6 text-sm">Choose a payment option below and fill out the appropriate information.</p>

            <div class="flex space-x-4 mb-8 border-b border-gray-200 pb-4">
                <button type="button" class="payment-tab flex items-center justify-center flex-1 py-3 px-2 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors duration-200 border border-transparent data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 data-[state=active]:shadow data-[state=active]:bg-blue-50" data-tab="creditCard">
                    <i data-lucide="credit-card" class="w-6 h-6 mr-2 text-sky-500 data-[state=active]:text-blue-600"></i> Credit Card
                </button>
                <button type="button" class="payment-tab flex items-center justify-center flex-1 py-3 px-2 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors duration-200 border border-transparent data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 data-[state=active]:shadow data-[state=active]:bg-blue-50" data-tab="giftCard">
                    <i data-lucide="gift" class="w-6 h-6 mr-2 text-orange-500 data-[state=active]:text-blue-600"></i> Gift Card
                </button>
            </div>

            <div id="paymentContent">
                <div id="creditCardTab" class="payment-tab-content space-y-8">
                    <form id="paymentForm" class="space-y-6">
                        @Html.AntiForgeryToken()
                        <div class="grid grid-cols-1 gap-6">
                            <div class="space-y-4">
                                <h3 class="text-base font-semibold text-gray-800 flex items-center mb-2">
                                    <i data-lucide="credit-card" class="w-4 h-4 mr-2 text-gray-500"></i> Credit Card Info
                                </h3>
                                <div>
                                    <label for="nameOnCard" class="block text-sm font-medium text-gray-700 mb-1">Name on Card</label>
                                    <input type="text" id="nameOnCard" name="NameOnCard"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Samira Rahman">
                                    <p id="nameOnCardError" class="mt-1 text-sm text-red-600 hidden"></p>
                                </div>
                                <div>
                                    <label for="cardNumber" class="block text-sm font-medium text-gray-700 mb-1">Card Number</label>
                                    <input type="text" id="cardNumber" name="CardNumber"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="0000 0000 0000 0000">
                                    <p id="cardNumberError" class="mt-1 text-sm text-red-600 hidden"></p>
                                </div>
                                <div class="grid grid-cols-3 gap-4">
                                    <div>
                                        <label for="cvv" class="block text-sm font-medium text-gray-700 mb-1">CVV</label>
                                        <input type="text" id="cvv" name="CVV"
                                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="123">
                                        <p id="cvvError" class="mt-1 text-sm text-red-600 hidden"></p>
                                    </div>
                                    <div>
                                        <label for="expMonth" class="block text-sm font-medium text-gray-700 mb-1">Exp. Month</label>
                                        <select id="expMonth" name="ExpMonth" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                            <option value="">Month</option>
                                            @for (int i = 1; i <= 12; i++)
                                            {
                                                <option value="@i.ToString("00")">@i.ToString("00")</option>
                                            }
                                        </select>
                                        <p id="expMonthError" class="mt-1 text-sm text-red-600 hidden"></p>
                                    </div>
                                    <div>
                                        <label for="expYear" class="block text-sm font-medium text-gray-700 mb-1">Exp. Year</label>
                                        <select id="expYear" name="ExpYear" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                            <option value="">Year</option>
                                            @for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 10; i++)
                                            {
                                                <option value="@i">@i</option>
                                            }
                                        </select>
                                        <p id="expYearError" class="mt-1 text-sm text-red-600 hidden"></p>
                                    </div>
                                </div>

                                <div class="relative pt-4">
                                    <label for="amountToPay" class="block text-sm font-medium text-gray-700 mb-2">Amount to Pay</label>
                                    <div class="mt-1 relative rounded-md shadow-sm">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <span class="text-gray-500 sm:text-sm">৳</span>
                                        </div>
                                        <input type="number" id="amountToPay" name="AmountToPay" step="0.01" min="0.01" value="@(Model.BillingSummary.DueAmount > 0 ? Model.BillingSummary.DueAmount : 0)"
                                               class="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-base border-gray-300 rounded-md p-3"
                                               placeholder="0.00" aria-describedby="price-currency">
                                        <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                            <span class="text-gray-500 sm:text-sm" id="price-currency">BDT</span>
                                        </div>
                                    </div>
                                    <p id="amountToPayError" class="mt-2 text-sm text-red-600 hidden"></p>
                                </div>
                            </div>
                        </div>

                        <button type="submit" id="payNowBtn"
                                class="w-full bg-indigo-600 text-white py-3 px-5 rounded-lg text-lg font-semibold
                                hover:bg-indigo-700 transition-colors duration-300 ease-in-out shadow-md hover:shadow-lg
                                transform hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-indigo-300">
                            <i data-lucide="arrow-right" class="w-5 h-5 mr-2 inline-block"></i> Continue
                        </button>
                    </form>
                </div>

                <div id="giftCardTab" class="payment-tab-content hidden text-center py-10 text-gray-500">
                    <i data-lucide="gift" class="w-16 h-16 mx-auto mb-4 text-orange-300"></i>
                    <p class="text-lg font-medium mb-2">Gift Card payments are not currently supported.</p>
                    <p class="text-sm">Please check back later or use another payment method.</p>
                </div>
            </div>
        </div>
    </div>

    <div class="@cardClass">
        <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
            <i data-lucide="history" class="w-5 h-5 mr-2 text-teal-600"></i>
            Transaction History
            <button id="generatePdfBtn" class="ml-auto bg-gray-200 text-gray-700 py-2 px-5 rounded-lg text-sm font-semibold
                                    hover:bg-gray-300 transition-colors duration-200 ease-in-out
                                    focus:outline-none focus:ring-2 focus:ring-gray-400">
                <i data-lucide="file-text" class="w-4 h-4 mr-1 inline-block"></i> Generate PDF
            </button>
        </h2>

        @if (Model.Transactions != null && Model.Transactions.Any())
        {
            <div class="overflow-x-auto border border-gray-200 rounded-lg">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Transaction ID</th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-100" id="transactionTableBody">
                        @foreach (var transaction in Model.Transactions)
                        {
                            <tr>
                                <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">#@transaction.TransactionID</td>
                                <td class="px-4 py-3 whitespace-nowrap text-base text-green-600 font-semibold">@transaction.Amount.ToString("C", new System.Globalization.CultureInfo("en-BD"))</td>
                                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">@transaction.PaymentDate.ToString("yyyy-MM-dd hh:mm tt")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-8 text-gray-500">
                <i data-lucide="piggy-bank" class="w-14 h-14 mx-auto mb-3 text-gray-300"></i>
                <p class="text-md font-medium">No transactions recorded yet.</p>
            </div>
        }
    </div>
</main>

@section scripts {
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
       
        lucide.createIcons();

        
        function showAlert(message, type = 'success') {
            const alertContainer = document.getElementById('alertContainer');
            const bgColor = type === 'success' ? 'bg-green-50' : 'bg-red-50';
            const borderColor = type === 'success' ? 'border-green-400' : 'border-red-400';
            const textColor = type === 'success' ? 'text-green-800' : 'text-red-800';
            const icon = type === 'success' ? 'check-circle' : 'alert-triangle';

            const alertDiv = document.createElement('div');
            alertDiv.className = `${bgColor} border-l-4 ${borderColor} ${textColor} p-5 rounded-lg shadow-md flex items-center animate-fade-in-down mb-4`;
            alertDiv.innerHTML = `
                <i data-lucide="${icon}" class="w-6 h-6 mr-3 ${type === 'success' ? 'text-green-500' : 'text-red-500'}"></i>
                <p class="font-semibold">${message}</p>
            `;
            alertContainer.prepend(alertDiv); 

            lucide.createIcons();

           
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM Content Loaded - Initializing script.');

           
            const tabs = document.querySelectorAll('.payment-tab');
            const tabContents = document.querySelectorAll('.payment-tab-content');
            const amountInput = document.getElementById('amountToPay');
            const payNowBtn = document.getElementById('payNowBtn');

           
            function activateTab(tabId) {
                tabs.forEach(tab => {
                    if (tab.dataset.tab === tabId) {
                        tab.setAttribute('data-state', 'active'); 
                    } else {
                        tab.removeAttribute('data-state'); 
                    }
                });

                tabContents.forEach(content => {
                    if (content.id === `${tabId}Tab`) {
                        content.classList.remove('hidden'); 
                    } else {
                        content.classList.add('hidden'); 
                    }
                });

                lucide.createIcons();
            }

           
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    activateTab(tab.dataset.tab);
                });
            });

            activateTab('creditCard'); 

           
            function parseCurrencyToFloat(currencyString) {
                let cleanedString = '';
                for (let i = 0; i < currencyString.length; i++) {
                    const char = currencyString.charAt(i);
                    // Keep only digits ('0'-'9') and the decimal point ('.')
                    if ((char >= '0' && char <= '9') || char === '.') {
                        cleanedString += char;
                    }
                }
                return parseFloat(cleanedString);
            }

            const dueAmountString = document.getElementById('dueAmountDisplay').textContent;
            const dueAmount = parseCurrencyToFloat(dueAmountString);
            console.log('Initial Due Amount:', dueAmount);

           
            if (dueAmount <= 0) {
                amountInput.value = 0; 
                amountInput.disabled = true; 
                payNowBtn.disabled = true; 
                payNowBtn.innerHTML = 'No Amount Due'; 
                payNowBtn.classList.add('opacity-50', 'cursor-not-allowed'); 
                console.log('Payment button disabled: No Amount Due.');
            } else {
                amountInput.value = dueAmount; 
                payNowBtn.disabled = false; 
                payNowBtn.innerHTML = '<i data-lucide="arrow-right" class="w-5 h-5 mr-2 inline-block"></i> Continue';
                payNowBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                lucide.createIcons();
                console.log('Payment button enabled: Amount Due.');
            }
        });

      
        const nameOnCardInput = document.getElementById('nameOnCard');
        const cardNumberInput = document.getElementById('cardNumber');
        const cvvInput = document.getElementById('cvv');
        const expMonthSelect = document.getElementById('expMonth');
        const expYearSelect = document.getElementById('expYear');
        const amountToPayInput = document.getElementById('amountToPay'); 
        const amountToPayError = document.getElementById('amountToPayError'); 


        
        function showValidationError(element, message) {
           
            let errorElementId = element.id + 'Error';
            if (element.id === 'amountToPay') { 
                errorElementId = 'amountToPayError';
            }
            const targetErrorElement = document.getElementById(errorElementId);

            element.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500'); 
            if (targetErrorElement) {
                targetErrorElement.textContent = message; 
                targetErrorElement.classList.remove('hidden'); 
            }
            console.log(`Validation Error for ${element.id}: ${message}`); 
        }

        
        function hideValidationError(element) {
            let errorElementId = element.id + 'Error';
            if (element.id === 'amountToPay') { 
                errorElementId = 'amountToPayError';
            }
            const targetErrorElement = document.getElementById(errorElementId);

            element.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500'); 
            if (targetErrorElement) { 
                targetErrorElement.classList.add('hidden'); 
                targetErrorElement.textContent = '';
            }
        }

        
        function clearAllValidationErrors() {
            hideValidationError(nameOnCardInput);
            hideValidationError(cardNumberInput);
            hideValidationError(cvvInput);
            hideValidationError(expMonthSelect);
            hideValidationError(expYearSelect);
            hideValidationError(amountToPayInput); 
        }

       
        function validateNameOnCard() {
            const value = nameOnCardInput.value.trim();
            if (value === "") {
                showValidationError(nameOnCardInput, "Name on Card is required.");
                return false;
            }
            hideValidationError(nameOnCardInput);
            return true;
        }

       
        function validateCardNumber() {
            const value = cardNumberInput.value.trim();
            if (value === "") {
                showValidationError(cardNumberInput, "Card Number is required.");
                return false;
            }
            hideValidationError(cardNumberInput);
            return true;
        }

        
        function validateCvv() {
            const value = cvvInput.value.trim();
            if (value === "") {
                showValidationError(cvvInput, "CVV is required.");
                return false;
            }
            hideValidationError(cvvInput);
            return true;
        }

        
        function validateExpiry() {
            const monthValue = expMonthSelect.value;
            const yearValue = expYearSelect.value;
            let isValid = true;

            if (monthValue === "") {
                showValidationError(expMonthSelect, "Please select an expiry month.");
                isValid = false;
            } else {
                hideValidationError(expMonthSelect);
            }

            if (yearValue === "") {
                showValidationError(expYearSelect, "Please select an expiry year.");
                isValid = false;
            } else {
                hideValidationError(expYearSelect);
            }
            return isValid;
        }

        
        function parseCurrencyToFloat(currencyString) {
            let cleanedString = '';
            for (let i = 0; i < currencyString.length; i++) {
                const char = currencyString.charAt(i);
                if ((char >= '0' && char <= '9') || char === '.') {
                    cleanedString += char;
                }
            }
            return parseFloat(cleanedString);
        }

        
        function validateAmountToPay() {
            const amount = parseFloat(amountToPayInput.value); 
            const currentDueString = document.getElementById('dueAmountDisplay').textContent;
            const currentDue = parseCurrencyToFloat(currentDueString);
            let isValid = true;

            if (isNaN(amount) || amount <= 0) {
                showValidationError(amountToPayInput, "Please enter a valid amount greater than zero.");
                isValid = false;
            } else if (amount > currentDue) {
                showValidationError(amountToPayInput, `Amount cannot exceed the due amount (${formatCurrency(currentDue, 'BDT')}).`);
                isValid = false;
            } else {
                hideValidationError(amountToPayInput);
            }
            return isValid;
        }


       
        document.getElementById('paymentForm').addEventListener('submit', async function (event) {
            event.preventDefault(); 
          

            
            clearAllValidationErrors();
           

           
            let isValidForm = true;

            if (!validateNameOnCard()) isValidForm = false;
            if (!validateCardNumber()) isValidForm = false;
            if (!validateCvv()) isValidForm = false;
            if (!validateExpiry()) isValidForm = false;
            if (!validateAmountToPay()) isValidForm = false;

            console.log('Overall form validation result:', isValidForm); 

            if (!isValidForm) {
                showAlert('Please correct the errors in the form before proceeding.', 'error');
               
                const amountInput = document.getElementById('amountToPay');
                const payNowBtn = document.getElementById('payNowBtn');
                payNowBtn.disabled = false;
                payNowBtn.innerHTML = '<i data-lucide="arrow-right" class="w-5 h-5 mr-2 inline-block"></i> Continue';
                payNowBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                lucide.createIcons();
                console.log('Form validation failed, button re-enabled.');
                return; 
            }

           
            const amountInput = document.getElementById('amountToPay');
            const payNowBtn = document.getElementById('payNowBtn');

            payNowBtn.disabled = true; 
            payNowBtn.innerHTML = '<i data-lucide="loader" class="w-5 h-5 mr-2 inline-block animate-spin"></i> Processing...';
            lucide.createIcons();
            console.log('Payment button set to processing state.');

            const formData = new FormData(this); 

            try {
                console.log('Sending payment request to server...'); 
                const response = await fetch('@Url.Action("ProcessPayment", "Client")', {
                    method: 'POST',
                    headers: {
                        
                        'RequestVerificationToken': formData.get('__RequestVerificationToken')
                    },
                    body: formData 
                });

                const result = await response.json(); 
                console.log('Server response received:', result); 

                if (response.ok && result.success) { 
                    showAlert(result.message, 'success'); 
                    console.log('Payment successful. Updating UI.');

                   
                    document.getElementById('totalFeesDisplay').textContent = formatCurrency(result.summary.TotalFees, 'BDT');
                    document.getElementById('paidAmountDisplay').textContent = formatCurrency(result.summary.PaidAmount, 'BDT');
                    document.getElementById('dueAmountDisplay').textContent = formatCurrency(result.summary.DueAmount, 'BDT');

                   
                    const transactionTableBody = document.getElementById('transactionTableBody');
                    const overflowDiv = document.querySelector('.overflow-x-auto.border.border-gray-200.rounded-lg');
                    const existingNoTransactionsDiv = document.querySelector('.text-center.py-8.text-gray-500');

                    if (result.transactions && result.transactions.length > 0) {
                        transactionTableBody.innerHTML = ''; 
                        result.transactions.forEach(tx => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">#${tx.TransactionID}</td>
                                <td class="px-4 py-3 whitespace-nowrap text-base text-green-600 font-semibold">${formatCurrency(tx.Amount, 'BDT')}</td>
                                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">${formatDate(tx.PaymentDate)}</td>
                            `;
                            transactionTableBody.appendChild(row); 
                        });

                        
                        if (overflowDiv) {
                            overflowDiv.style.display = 'block';
                        }
                        if (existingNoTransactionsDiv) {
                            existingNoTransactionsDiv.remove();
                        }
                        console.log('Transaction history updated.');
                    } else {
                        
                         if (overflowDiv) {
                            overflowDiv.style.display = 'none'; 
                         }
                         if (!existingNoTransactionsDiv) { 
                            const historyCard = document.querySelector('.cardClass:last-of-type');
                            const emptyStateDiv = document.createElement('div');
                            emptyStateDiv.className = "text-center py-8 text-gray-500";
                            emptyStateDiv.innerHTML = `
                                <i data-lucide="piggy-bank" class="w-14 h-14 mx-auto mb-3 text-gray-300"></i>
                                <p class="text-md font-medium">No transactions recorded yet.</p>
                            `;
                            if(historyCard) {
                                historyCard.appendChild(emptyStateDiv);
                            }
                            lucide.createIcons();
                            console.log('No transactions: displayed empty state message.');
                        }
                    }

                } else {
                    
                    const errorMessage = result.message || `Payment failed with status: ${response.status}. Please check your input.`;
                    showAlert(errorMessage, 'error');
                    console.error('Server reported error:', result.message, result.errors);

                    if (result.errors) {
                        const errorDisplayElement = document.getElementById('amountToPayError');
                        if (errorDisplayElement) {
                             errorDisplayElement.textContent = result.errors.join(', ');
                             errorDisplayElement.classList.remove('hidden');
                             amountInput.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
                        }
                    }
                }
            } catch (error) {
                console.error('Fetch error during payment process:', error); 
                showAlert('An unexpected error occurred. Please try again.', 'error');
            } finally {
               
                const finalDueAmount = parseCurrencyToFloat(document.getElementById('dueAmountDisplay').textContent);
                if (finalDueAmount <= 0) {
                    amountInput.value = 0; 
                    amountInput.disabled = true;
                    payNowBtn.innerHTML = 'No Amount Due';
                    payNowBtn.disabled = true;
                    payNowBtn.classList.add('opacity-50', 'cursor-not-allowed');
                    console.log('Final state: No Amount Due.');
                } else {
                    amountInput.value = finalDueAmount; 
                    amountInput.disabled = false;
                    payNowBtn.innerHTML = '<i data-lucide="arrow-right" class="w-5 h-5 mr-2 inline-block"></i> Continue';
                    payNowBtn.disabled = false;
                    payNowBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                    console.log('Final state: Amount Due, button re-enabled.');
                }
                lucide.createIcons(); 
            }
        });

       
        document.getElementById('generatePdfBtn').addEventListener('click', function () {
            console.log('Generate PDF button clicked.');
           
            const printWindow = window.open('@Url.Action("GenerateTransactionPdf", "Client")', '_blank');
            if (printWindow) {
                printWindow.focus(); 
            } else {
                showAlert('Please allow pop-ups for PDF generation.', 'error'); 
            }
        });

        
        function formatCurrency(amount, currencyCode = 'BDT') {
            return new Intl.NumberFormat('en-BD', { style: 'currency', currency: currencyCode }).format(amount);
        }

        
        function formatDate(dateString) {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) { 
                return dateString; 
            }
            
            const options = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit', hour12: true };
            return date.toLocaleDateString('en-BD', options);
        }
    </script>
    <style>
        
        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f0f4f8; 
            border-radius: 10px;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #cbd5e0; 
            border-radius: 10px;
        }

            .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                background: #a0aec0; 
            }

        
        @@keyframes fade-in-down {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .animate-fade-in-down {
            animation: fade-in-down 0.5s ease-out forwards;
        }
    </style>
}