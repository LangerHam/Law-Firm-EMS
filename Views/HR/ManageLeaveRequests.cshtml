@model Law_Firm_EMS.ViewModels.HR.LeaveManagementViewModel
@{
    ViewBag.Title = "ManageLeaveRequests";
    Layout = "~/Views/Shared/HRnavbar.cshtml";
}

<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">

    <!-- Left Column: Calendar -->
    <div class="lg:col-span-2">
        <div class="bg-white p-6 rounded-lg shadow-md">
            <!-- Calendar Header -->
            <div class="flex justify-between items-center mb-4">
                <button id="prev-month-btn" class="p-2 rounded-full hover:bg-gray-100">
                    <i data-lucide="chevron-left" class="h-6 w-6 text-gray-600"></i>
                </button>
                <h2 id="calendar-title" class="text-xl font-bold text-gray-800"></h2>
                <button id="next-month-btn" class="p-2 rounded-full hover:bg-gray-100">
                    <i data-lucide="chevron-right" class="h-6 w-6 text-gray-600"></i>
                </button>
            </div>

            <!-- Calendar Grid -->
            <div class="grid grid-cols-7 gap-1 text-center font-semibold text-gray-500 text-sm pb-2 border-b">
                <div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>
            </div>
            <div id="calendar-grid" class="grid grid-cols-7 gap-1 mt-1">
            </div>
        </div>
    </div>

    <!-- Right Column: Pending Requests -->
    <div class="lg:col-span-1">
        <div class="bg-white p-6 rounded-lg shadow-md">
            <div class="flex items-center mb-4">
                <div class="bg-amber-100 p-2 rounded-full">
                    <i data-lucide="mail-question" class="h-6 w-6 text-amber-600"></i>
                </div>
                <h3 class="ml-3 font-semibold text-lg text-gray-800">Pending Leave Requests</h3>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-3 mb-4 text-sm" role="alert">
                    @TempData["SuccessMessage"]
                </div>
            }

            <div class="space-y-4 max-h-[35rem] overflow-y-auto pr-2">
                @if (Model.PendingRequests.Any())
                {
                    foreach (var leave in Model.PendingRequests)
                    {
                        <div class="bg-gray-50 p-4 rounded-md">
                            <p class="font-semibold text-gray-800">@leave.RequestedByConsultant.Name</p>
                            <p class="text-sm text-gray-600">
                                <span class="font-medium">Type:</span> @leave.Type
                            </p>
                            <p class="text-sm text-gray-600">
                                <span class="font-medium">Dates:</span> @leave.FromDate.ToString("MMM dd") - @leave.ToDate.ToString("MMM dd, yyyy")
                            </p>
                            <div class="flex items-center justify-end space-x-2 mt-3">
                                @using (Html.BeginForm("UpdateLeaveStatus", "HR", new { leaveId = leave.LeaveID, decision = "reject" }, FormMethod.Post))
                                {
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="px-3 py-1 text-xs font-medium text-red-700 bg-red-100 rounded-full hover:bg-red-200">Reject</button>
                                }
                                @using (Html.BeginForm("UpdateLeaveStatus", "HR", new { leaveId = leave.LeaveID, decision = "accept" }, FormMethod.Post))
                                {
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="px-3 py-1 text-xs font-medium text-green-700 bg-green-100 rounded-full hover:bg-green-200">Accept</button>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-10 text-gray-500">
                        <i data-lucide="check-circle-2" class="h-12 w-12 mx-auto mb-2 text-green-500"></i>
                        <p>No pending leave requests.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const calendarTitle = document.getElementById('calendar-title');
        const calendarGrid = document.getElementById('calendar-grid');
        const prevMonthBtn = document.getElementById('prev-month-btn');
        const nextMonthBtn = document.getElementById('next-month-btn');

        let currentDate = new Date('@Model.CalendarDate.ToString("yyyy-MM-dd")T00:00:00');
        let leaveEvents = [];

        function getLeaveColor(type) {
            switch (type.toLowerCase()) {
                case 'sick leave': return 'bg-red-200 border-red-400';
                case 'paid leave': return 'bg-sky-200 border-sky-400';
                case 'unpaid leave': return 'bg-gray-200 border-gray-400';
                default: return 'bg-indigo-200 border-indigo-400';
            }
        }

        async function fetchAndRenderCalendar(year, month) {
            try {
                 const cacheBuster = new Date().getTime();
                const response = await fetch(`@Url.Action("GetLeaveEvents", "HR")?year=${year}&month=${month}&_=${cacheBuster}`);
                if (!response.ok) throw new Error('Network response was not ok');

                const rawEvents = await response.json();
                leaveEvents = rawEvents.map(e => ({
                    ...e,
                    Start: new Date(e.Start),
                    End: new Date(e.End) 
                }));
            } catch (error) {
                console.error("Failed to fetch leave events:", error);
                leaveEvents = [];
            }
            renderCalendar(year, month);
        }

        function renderCalendar(year, month) {
            calendarTitle.textContent = new Date(year, month - 1).toLocaleString('default', { month: 'long', year: 'numeric' });
            calendarGrid.innerHTML = '';

            const firstDay = new Date(year, month - 1, 1).getDay();
            const daysInMonth = new Date(year, month, 0).getDate();

            for (let i = 0; i < firstDay; i++) {
                calendarGrid.innerHTML += '<div></div>';
            }

            for (let day = 1; day <= daysInMonth; day++) {
                let cell = `<div class="p-1 min-h-[7rem] border border-gray-200 relative flex flex-col">
                                <span class="font-semibold ${new Date().toDateString() === new Date(year, month - 1, day).toDateString() ? 'bg-sky-500 text-white rounded-full h-7 w-7 flex items-center justify-center' : 'text-gray-700'}">${day}</span>
                                <div class="mt-1 space-y-1 overflow-y-auto text-xs text-left">`;

                const today = new Date(year, month - 1, day);
                const eventsForDay = leaveEvents.filter(e => today >= e.Start && today < e.End);

                eventsForDay.forEach(event => {
                    cell += `<div class="p-1 rounded ${getLeaveColor(event.Type)}">
                                ${event.Title}
                             </div>`;
                });

                cell += `</div></div>`;
                calendarGrid.innerHTML += cell;
            }
        }
        prevMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            fetchAndRenderCalendar(currentDate.getFullYear(), currentDate.getMonth() + 1);
        });

        nextMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            fetchAndRenderCalendar(currentDate.getFullYear(), currentDate.getMonth() + 1);
        });

        fetchAndRenderCalendar(currentDate.getFullYear(), currentDate.getMonth() + 1);
    });
    </script>
}

