@model Law_Firm_EMS.Models.Consultant
@{
    ViewBag.Title = "ConsultantDetails";
    Layout = "~/Views/Shared/HRnavbar.cshtml";
}

<div class="bg-white p-8 rounded-lg shadow-md max-w-4xl mx-auto">
    @using (Html.BeginForm("ConsultantDetails", "HR", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.UserID)

       
        <div class="flex justify-between items-start mb-6 border-b pb-4">
            <div>
                <h1 class="text-3xl font-bold text-gray-800">@Model.Name</h1>
                <p class="text-lg text-gray-500">Edit Consultant Profile</p>
            </div>
            <div class="flex space-x-3">
                <button type="submit" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors flex items-center">
                    <i data-lucide="save" class="h-4 w-4 mr-2"></i>
                    <span>Save Changes</span>
                </button>
                <button type="button"
                        onclick="openDeleteModal(@Model.UserID, '@HttpUtility.JavaScriptStringEncode(Model.Name)')"
                        class="text-red-600 hover:text-red-900 focus:outline-none">
                    Delete
                </button>
            </div>
        </div>

        if (TempData["SuccessMessage"] != null)
        {
            <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6" role="alert">
                <p class="font-bold">Success</p>
                <p>@TempData["SuccessMessage"]</p>
            </div>
        }
        @Html.ValidationSummary(true, "", new { @class = "text-red-600 bg-red-50 p-3 rounded-md mb-6" })



        <!-- Main Details Grid -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">

            <!-- Profile Picture and Basic Info -->
            <div class="md:col-span-1 text-center">
                <img src="@(Model.ProfilePhotoPath ?? "https://placehold.co/400x400/E2E8F0/4A5568?text=" + Model.Name.Substring(0,1))"
                     alt="Profile Picture"
                     class="w-40 h-40 rounded-full mx-auto mb-4 object-cover border-4 border-gray-200" />

                <div class="text-left space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-500">Email Address (Read-only)</label>
                        <input type="text" value="@Model.User.Email" class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100" readonly />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-500">Joined On</label>
                        <input type="text" value="@Model.User.CreatedAt.ToString("MMMM dd, yyyy")" class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100" readonly />
                    </div>
                </div>
            </div>


            <div class="md:col-span-2 space-y-6">
                <div>
                    @Html.LabelFor(model => model.Name, "Full Name", new { @class = "block text-sm font-medium text-gray-700" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "mt-1 w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-sky-500 focus:border-sky-500" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-red-600 text-xs mt-1" })
                </div>
                <div>
                    @Html.LabelFor(model => model.Phone, new { @class = "block text-sm font-medium text-gray-700" })
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "mt-1 w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-sky-500 focus:border-sky-500" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-red-600 text-xs mt-1" })
                </div>
            </div>
        </div>

        <div class="mt-8 pt-6 border-t">
            <a href="@Url.Action("ManageConsultants", "HR")" class="text-sky-600 hover:text-sky-800 flex items-center">
                <i data-lucide="arrow-left" class="h-4 w-4 mr-2"></i>
                <span>Back to Consultant Roster</span>
            </a>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 backdrop-blur-sm flex items-center justify-center hidden z-50">
    <div class="bg-white p-8 rounded-lg shadow-xl max-w-md w-full">
        <div class="text-center">
            <i data-lucide="alert-triangle" class="h-16 w-16 text-red-500 mx-auto mb-4"></i>
            <h2 class="text-2xl font-bold text-gray-800 mb-2">Are you sure?</h2>
            <p class="text-gray-600 mb-6">
                You are about to permanently delete consultant <strong id="consultant-name-in-modal" class="text-gray-800"></strong>. This action cannot be undone.
            </p>
        </div>
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "delete-form" }))
        {
            @Html.AntiForgeryToken()
            <div class="flex items-center justify-center space-x-4 pt-4">
                <button type="button" onclick="closeDeleteModal()" class="bg-gray-200 text-gray-700 px-6 py-2 rounded-lg hover:bg-gray-300">Cancel</button>
                <input type="submit" value="Yes, Delete" class="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 cursor-pointer" />
            </div>
        }
    </div>
</div>


@section scripts {
    <script>
    const modal = document.getElementById('delete-modal');
    const deleteForm = document.getElementById('delete-form');
    const consultantNameSpan = document.getElementById('consultant-name-in-modal');

    function openDeleteModal(id, name) {
        const deleteUrl = '@Url.Action("DeleteConsultant", "HR")/' + id;
        deleteForm.action = deleteUrl;

        consultantNameSpan.textContent = name;
        modal.classList.remove('hidden');
    }

    function closeDeleteModal() {
        modal.classList.add('hidden');
    }
    </script>
}