@model Law_Firm_EMS.ViewModels.HR.ManageTasksViewModel
@{
    ViewBag.Title = "ManageTasks";
    Layout = "~/Views/Shared/HRnavbar.cshtml";
}

<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">

    
    <div class="lg:col-span-1">
        <div class="bg-white p-6 rounded-lg shadow-md sticky top-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-6">Assign New Task</h2>

            @using (Html.BeginForm("CreateTask", "HR", FormMethod.Post))
            {
                @Html.AntiForgeryToken()

                <div class="space-y-6">
                    @Html.ValidationSummary(true, "", new { @class = "text-red-600 bg-red-50 p-3 rounded-md" })

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">How do you want to create this task?</label>
                        <div class="flex items-center space-x-6">
                            <label class="flex items-center">
                                @Html.RadioButtonFor(m => m.CreateTaskForm.TaskCreationType, "FromLoR", new { @id = "type_lor", @class = "h-4 w-4" })
                                <span class="ml-2 text-sm text-gray-700">From LoR Draft</span>
                            </label>
                            <label class="flex items-center">
                                @Html.RadioButtonFor(m => m.CreateTaskForm.TaskCreationType, "NewDocument", new { @id = "type_new", @class = "h-4 w-4" })
                                <span class="ml-2 text-sm text-gray-700">New EIA/PES</span>
                            </label>
                        </div>
                        @Html.ValidationMessageFor(m => m.CreateTaskForm.TaskCreationType, "", new { @class = "text-red-600 text-xs mt-1" })
                    </div>

                    <div id="client-container" class="hidden">
                        @Html.LabelFor(m => m.CreateTaskForm.SelectedClientID, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.DropDownListFor(m => m.CreateTaskForm.SelectedClientID, Model.CreateTaskForm.ClientList, "--- Select Client ---", new { @class = "w-full px-4 py-2 border border-gray-300 rounded-lg" })
                        @Html.ValidationMessageFor(m => m.CreateTaskForm.SelectedClientID, "", new { @class = "text-red-600 text-xs mt-1" })
                    </div>

                    <div id="new-doc-fields" class="hidden">
                        @Html.LabelFor(m => m.CreateTaskForm.NewDocumentTypeID, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.DropDownListFor(m => m.CreateTaskForm.NewDocumentTypeID, Model.CreateTaskForm.NewDocumentTypeList, "--- Select Type ---", new { @class = "w-full px-4 py-2 border border-gray-300 rounded-lg" })
                        @Html.ValidationMessageFor(m => m.CreateTaskForm.NewDocumentTypeID, "", new { @class = "text-red-600 text-xs mt-1" })
                    </div>

                    <div id="lor-fields" class="hidden">
                        @Html.LabelFor(m => m.CreateTaskForm.SelectedLoRDocumentID, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.DropDownListFor(m => m.CreateTaskForm.SelectedLoRDocumentID, Model.CreateTaskForm.UnassignedLoRList, "--- Select Client First ---", new { @class = "w-full px-4 py-2 border border-gray-300 rounded-lg", @disabled = "disabled" })
                        @Html.ValidationMessageFor(m => m.CreateTaskForm.SelectedLoRDocumentID, "", new { @class = "text-red-600 text-xs mt-1" })
                    </div>

                    <div id="common-fields" class="hidden space-y-6">
                        <div>
                            @Html.LabelFor(m => m.CreateTaskForm.AssignedToConsultantID, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                            @Html.DropDownListFor(m => m.CreateTaskForm.AssignedToConsultantID, Model.CreateTaskForm.ConsultantList, "--- Select Consultant ---", new { @class = "w-full px-4 py-2 border border-gray-300 rounded-lg" })
                            @Html.ValidationMessageFor(m => m.CreateTaskForm.AssignedToConsultantID, "", new { @class = "text-red-600 text-xs mt-1" })
                        </div>
                        <div>
                            @Html.LabelFor(m => m.CreateTaskForm.Instructions, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                            @Html.TextAreaFor(m => m.CreateTaskForm.Instructions, new { @rows = 4, @class = "w-full px-4 py-2 border border-gray-300 rounded-lg", @placeholder = "Add specific instructions..." })
                        </div>
                    </div>

                    <div class="flex items-center justify-end space-x-4 pt-4">
                        <input type="submit" value="Assign Task" class="w-full bg-sky-500 text-white px-4 py-2 rounded-lg hover:bg-sky-600 cursor-pointer" />
                    </div>
                </div>
            }
        </div>
    </div>

    
    <div class="lg:col-span-2">
        <div class="bg-white p-6 rounded-lg shadow-md">
            <div class="flex justify-between items-center mb-6">
                <div>
                    <h1 class="text-2xl font-bold text-gray-800">Current Tasks</h1>
                    <p class="text-gray-500">A list of all active and pending tasks.</p>
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Task (Document)</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">For Client</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Assigned To</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>                            
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        @foreach (var item in Model.TaskList)
                        {
                            <tr>
                                <td class="px-6 py-4 text-sm font-medium text-gray-900">
                                    @item.Document.DocumentType.TypeName - (Doc ID: @item.DocumentID)
                                </td>
                                <td class="px-6 py-4 text-sm text-gray-500">@item.Document.Client.FullName</td>
                                <td class="px-6 py-4 text-sm text-gray-500">@item.AssignedToConsultant.Name</td>
                                <td class="px-6 py-4 text-sm">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                        @item.Status.StatusName
                                    </span>
                                </td>                                
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
    $(document).ready(function() {
        
        const clientContainer = $('#client-container');
        const lorFields = $('#lor-fields');
        const newDocFields = $('#new-doc-fields');
        const commonFields = $('#common-fields');

        function toggleFormFields() {
             const selectedType = $('input[name="CreateTaskForm.TaskCreationType"]:checked').val();

            if (!selectedType) {
                clientContainer.addClass('hidden');
                commonFields.addClass('hidden');
                lorFields.addClass('hidden');
                newDocFields.addClass('hidden');
                return;
            }

            clientContainer.removeClass('hidden');
            commonFields.removeClass('hidden');

            if (selectedType === 'FromLoR') {
                lorFields.removeClass('hidden');
                newDocFields.addClass('hidden');
            } else if (selectedType === 'NewDocument') {
                newDocFields.removeClass('hidden');
                lorFields.addClass('hidden');
            }
        }

        $('input[name="CreateTaskForm.TaskCreationType"]').on('change', toggleFormFields);

        
        toggleFormFields();

        $('#CreateTaskForm_SelectedClientID').on('change', function() {
            const clientId = $(this).val();
            const lorDropdown = $('#CreateTaskForm_SelectedLoRDocumentID');
            const creationType = $('input[name="CreateTaskForm.TaskCreationType"]:checked').val();

            if (clientId && creationType === 'FromLoR') {
                lorDropdown.prop('disabled', true).html('<option>Loading LoRs...</option>');

                $.ajax({
                    url: '@Url.Action("GetUnassignedLoRs", "HR")',
                    type: 'GET',
                    data: { clientId: clientId },
                    success: function(data) {
                        lorDropdown.empty().append($('<option></option>').val('').text('--- Select an LoR Draft ---'));
                        if (data.length > 0) {
                             $.each(data, function(i, item) {
                                lorDropdown.append($('<option></option>').val(item.Value).text(item.Text));
                            });
                            lorDropdown.prop('disabled', false);
                        } else {
                            lorDropdown.html('<option>No unassigned LoR drafts found for this client.</option>');
                        }
                    },
                    error: function() {
                        lorDropdown.html('<option>Error loading LoRs.</option>');
                    }
                });
            } else {
                 lorDropdown.prop('disabled', true).html('<option>--- First Select a Client ---</option>');
            }
        });
    });
    </script>
}
